import random
class Matrix:
    def __init__(self, r, c):
        self.rows=r
        self.coloums=c
        self.matrix=[]
        for cou1 in range(self.rows):
            self.matrix.append([])
            for cou2 in range(self.coloums):
                self.matrix[cou1].append(random.randint(1, 5))
    def display(self):
        for i in range(self.rows):
            print(self.matrix[i])
        print("\n")

    def __add__(self,other):#M+M
        if (self.rows == other.rows) and (self.coloums == other.coloums):
            result=Matrix(self.rows, self.coloums)
            for cou1 in range(self.rows):
                for cou2 in range(self.coloums):
                    result.matrix[cou1][cou2]=self.matrix[cou1][cou2]+other.matrix[cou1][cou2]
            return result
        else:
            print("Can't sum\n")

    def __sub__(self,other):#M-M
        if (self.rows == other.rows) and (self.coloums == other.coloums):
            result=Matrix(self.rows, self.coloums)
            for cou1 in range(self.rows):
                for cou2 in range(self.coloums):
                    result.matrix[cou1][cou2]=self.matrix[cou1][cou2]-other.matrix[cou1][cou2]
            return result
        else:
            print("Can't sub\n")

    def __mul__(self,other):
        if type(other).__name__=='int':#M*num
            result = Matrix(self.rows, self.coloums)
            for cou1 in range(self.rows):
                for cou2 in range(self.coloums):
                    result.matrix[cou1][cou2]=self.matrix[cou1][cou2]*other
            return(result)
        elif self.coloums==other.rows:#MxM
            result = Matrix(self.rows, other.coloums)
            for cou1 in range(self.rows):
                for cou2 in range (other.coloums):
                    elem=0
                    for cou3 in range(self.coloums):
                        elem += self.matrix[cou1][cou3]*other.matrix[cou3][cou2]
                    result.matrix[cou1][cou2]=elem
            return result
        else:
            print("Can't mul\n")

    def transp(self):
        result = Matrix(self.coloums, self.rows)
        for cou2 in range(self.coloums):
            for cou1 in range(self.rows):
                result.matrix[cou2][cou1]=self.matrix[cou1][cou2]
        result.display()


    def det(self):
        if self.rows == self.coloums:
            if self.rows == 1:
                return self.matrix[0][0]
            if self.rows == 2:
                det = 0
                det += self.matrix[0][0]*self.matrix[1][1]
                det -= self.matrix[1][0]*self.matrix[0][1]
                return det
            if self.rows == 3:
                det = 0
                det += self.matrix[0][0] * self.matrix[1][1] * self.matrix[2][2] + \
                       self.matrix[1][0] * self.matrix[0][2] * self.matrix[2][1] + \
                       self.matrix[0][1] * self.matrix[1][2] * self.matrix[2][0]
                det -= (self.matrix[0][2] * self.matrix[1][1] * self.matrix[2][0] + \
                        self.matrix[0][0] * self.matrix[1][2] * self.matrix[2][1] +
                        self.matrix[0][1] * self.matrix[2][2] * self.matrix[1][0])
                return det
            if self.rows > 3:
                det = 0
                for i in range(self.rows):
                    if i % 2 == 0:
                        det += self.matrix[i][0] * self.getmatrix(i).det()
                    else:
                        det += (-self.matrix[i][0] * self.getmatrix(i).det())
                return det
        else:
            print("Can not det")
            return 'string'
    
    def getmatrix(self, r):
        result = Matrix(self.rows - 1, self.coloums - 1)
        k = 0
        for cou1 in range(self.rows):
            if cou1 != r:
                result.matrix[k] = []
                for cou2 in range(self.coloums-1):
                    result.matrix[k].append(self.matrix[cou1][cou2+1])
                k+=1
        return result
